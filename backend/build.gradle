buildscript {
  ext {
    kotlinVersion = '1.5.10'
    springBootVersion = '2.6.8'

    // #junit5 #Mockk
    mockKVersion = '1.9.3'
    springMockKVersion = '1.1.2'
    kotlinLoggingVersion = '1.7.6'
    junit5JupiterVersion = '5.1.1'
    assertjVersion = '3.12.2'

    // #logging
    logstashEncoderVersion = '6.2'
    janinoVersion = '3.1.6'

    auth0JwtVersion = '3.19.0'
    wiremockJunit5ExtensionVersion = '0.4.0'

    postgresVersion = '42.3.5'
    flywayVersion = '8.4.4'
    h2DatabaseVersion = '2.1.210'
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath 'com.adarshr:gradle-test-logger-plugin:1.6.0'
    classpath "au.com.dius:pact-jvm-provider-gradle_2.12:3.6.7"
  }
}
plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.3.61'
  id 'java'
  id 'jacoco'
}

apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-platform-jvm'
apply plugin: "kotlin-noarg"
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-jpa"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'jacoco'
apply plugin: "au.com.dius.pact"
apply plugin: "org.sonarqube"

defaultTasks 'run'

apply plugin: 'application'

configurations {
  developmentOnly
  ktlint
  runtimeClasspath {
    extendsFrom developmentOnly
  }
}

dependencies {
  ktlint "com.pinterest:ktlint:0.41.0"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  implementation("org.jetbrains.kotlin:kotlin-reflect")

  implementation('org.springframework.boot:spring-boot-starter-web')
  implementation('org.springframework.boot:spring-boot-starter-web-services'){
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
  }
  implementation('org.springframework.boot:spring-boot-starter-actuator')
  implementation('org.springframework.boot:spring-boot-starter-security')
  implementation('org.springframework.boot:spring-boot-starter-amqp')
  implementation('org.springframework.boot:spring-boot-starter-data-jpa')
  implementation("org.postgresql:postgresql")

  implementation("com.fasterxml.jackson.core:jackson-databind:2.13.2.2")
  implementation('com.fasterxml.jackson.module:jackson-module-kotlin:2.13.2') {
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
  }
  implementation(group: 'com.google.code.gson', name: 'gson', version: '2.9.0')


  // #database
  implementation('org.springframework.boot:spring-boot-starter-data-jpa')
  implementation("org.postgresql:postgresql:${postgresVersion}")
  implementation("org.flywaydb:flyway-core:${flywayVersion}")

  //   #junit5 #mockk
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '2.1.1.RELEASE'
  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation 'com.rabbitmq:amqp-client:5.14.2'
  testImplementation 'org.springframework.amqp:spring-rabbit-test:2.4.3'
  testImplementation 'org.springframework.amqp:spring-rabbit-junit:2.4.3'

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junit5JupiterVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junit5JupiterVersion}")
  testImplementation("org.junit.jupiter:junit-jupiter-params:${junit5JupiterVersion}")
  testImplementation("org.assertj:assertj-core:${assertjVersion}")
  testImplementation("org.assertj:assertj-core:3.11.1")

  testImplementation("com.ninja-squad:springmockk:${springMockKVersion}")
  testImplementation("io.mockk:mockk:${mockKVersion}")
  testImplementation("io.mockk:mockk:1.9.3")
  testImplementation("com.h2database:h2:${h2DatabaseVersion}")
  testImplementation "com.github.JensPiegsa:wiremock-extension:${wiremockJunit5ExtensionVersion}"
  testImplementation project(':stubs')

  // #devtool
  developmentOnly("org.springframework.boot:spring-boot-devtools")
}


test{
  finalizedBy(tasks.jacocoTestCoverageVerification)
  // Enable JUnit 5 (Gradle 4.6+).
  test.useJUnitPlatform()
  // Always run tests, even when nothing changed.
  test.dependsOn 'cleanTest'
  // Show test results.
  test.testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat = "full"
  }
  include '**/*Test.class'
  include '**/*Tests.class'
}

compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "11"
  }
}

compileTestKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "11"
  }
}


testlogger {
  theme 'mocha'
  showExceptions true
  slowThreshold 500
  showSummary true
  showPassed true
  showSkipped true
  showFailed true
  showStandardStreams false
  showPassedStandardStreams true
  showSkippedStandardStreams true
  showFailedStandardStreams true
}

jacoco {
  toolVersion = '0.8.7'
}


jacocoTestReport {
  dependsOn(tasks.test)
  reports {
    xml.enabled true
    csv.enabled true
    html.destination file("${buildDir}/reports/jacoco/html")
  }
}

mainClassName = 'com.blackhorse.airplaneTicketKt'
bootJar {
  archiveFileName = 'airplaneTicket.jar'
}

task writePom {
  // create a pom for automatic dependency security checking tools
  doLast {
    pom {}.writeTo("pom.xml")
  }
}

jacocoTestCoverageVerification {
  dependsOn(jacocoTestReport)
  violationRules {
    rule {
      limit {
        minimum = 0.5
      }
    }

    rule {
      enabled = false
      element = 'CLASS'
      includes = ['backend.src.*']

      limit {
        counter = 'LINE'
        value = 'TOTALCOUNT'
        maximum = 0.6
      }
    }
  }
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  main = "com.pinterest.ktlint.Main"
  classpath = configurations.ktlint
  args "src/**/*.kt"
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // see https://github.com/pinterest/ktlint#usage for more
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  main = "com.pinterest.ktlint.Main"
  classpath = configurations.ktlint
  args "-F", "src/**/*.kt"
}

sonarqube {
  properties {
    property "sonar.projectKey", "com.blackhorse.airplaneTicket"
    property "sonar.projectName", "airplaneTicket"
    property "sonar.sources", "src/main/"
    property "sonar.tests", "src/test/"
    property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/**"
  }
}


task wrapper(type: Wrapper) {
  gradleVersion = '6.9.2' //run this task to upgrade gradle version
}
